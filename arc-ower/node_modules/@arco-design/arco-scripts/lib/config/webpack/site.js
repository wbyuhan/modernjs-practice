"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prod = exports.dev = void 0;
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const webpack_1 = __importDefault(require("webpack"));
const webpack_merge_1 = __importDefault(require("webpack-merge"));
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const write_file_webpack_plugin_1 = __importDefault(require("write-file-webpack-plugin"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const progress_bar_webpack_plugin_1 = __importDefault(require("progress-bar-webpack-plugin"));
const optimize_css_assets_webpack_plugin_1 = __importDefault(require("optimize-css-assets-webpack-plugin"));
const babel_config_1 = __importDefault(require("../babel.config"));
const constant_1 = require("../../constant");
const getConfigProcessor_1 = __importDefault(require("../../scripts/utils/getConfigProcessor"));
const DIR_PATH_SITE = `${constant_1.CWD}/${constant_1.DIR_NAME_SITE}`;
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;
function getUse(cssModule, isProduction) {
    const options = cssModule
        ? {
            modules: {
                localIdentName: '[local]-[hash:10]',
            },
        }
        : {};
    return [
        {
            loader: isProduction ? mini_css_extract_plugin_1.default.loader : 'style-loader',
        },
        {
            loader: 'css-loader',
            options,
        },
        {
            loader: 'less-loader',
            options: {
                javascriptEnabled: true,
            },
        },
    ];
}
const baseConfig = {
    context: DIR_PATH_SITE,
    entry: `${DIR_PATH_SITE}/src/pages/components/index.js`,
    output: {
        path: `${DIR_PATH_SITE}/dist`,
    },
    module: {
        rules: [
            {
                test: /\.(js|jsx|ts|tsx)$/,
                exclude: /node_modules/,
                loader: 'babel-loader',
                options: babel_config_1.default,
                // loader: 'esbuild-loader',
                // options: {
                //   loader: 'tsx',
                //   target: 'es2015',
                // },
            },
            {
                test: /\.md$/,
                use: [
                    {
                        loader: 'babel-loader',
                        options: babel_config_1.default,
                        // loader: 'esbuild-loader',
                        // options: {
                        //   loader: 'jsx',
                        //   target: 'es2015',
                        // },
                    },
                    {
                        loader: '@arco-design/arco-markdown-loader',
                        options: {
                            demoDir: 'demo',
                            babelConfig: babel_config_1.default,
                        },
                    },
                ],
            },
            {
                test: /\.svg$/,
                use: ['@svgr/webpack'],
            },
            {
                test: /\.(png|jpg|gif)$/,
                loader: 'file-loader',
                options: {
                    esModule: false,
                },
            },
            {
                test: /\.(ttf|eot|woff|woff2)$/,
                loader: 'file-loader',
                options: {
                    name: 'fonts/[name].[ext]',
                    esModule: false,
                },
            },
        ],
    },
    plugins: [
        new html_webpack_plugin_1.default({
            template: `${DIR_PATH_SITE}/public/index.html`,
        }),
        new progress_bar_webpack_plugin_1.default({
            format: `[arco-scripts]: [:bar] ${chalk_1.default.green.bold(':percent')} (:elapsed seconds)`,
        }),
    ],
    resolve: {
        modules: [`${DIR_PATH_SITE}/node_modules`, 'node_modules'],
        extensions: ['.ts', '.tsx', '.js', '.jsx', '.json'],
        alias: {},
    },
};
// Avoid require.resolve error when react is not installed
try {
    baseConfig.resolve.alias.react = require.resolve('react');
}
catch (e) { }
const config = {
    dev: webpack_merge_1.default.smart(baseConfig, {
        mode: 'development',
        output: {
            publicPath: '/',
            filename: '[name].min.js',
        },
        module: {
            rules: [
                {
                    test: lessRegex,
                    exclude: lessModuleRegex,
                    use: getUse(false, false),
                },
                {
                    test: /\.css$/,
                    use: [
                        {
                            loader: 'style-loader',
                        },
                        {
                            loader: 'css-loader',
                        },
                    ],
                },
                {
                    test: lessModuleRegex,
                    use: getUse(true, false),
                },
            ],
        },
        plugins: [new write_file_webpack_plugin_1.default()],
        devServer: {
            contentBase: path_1.default.join(__dirname, 'dist'),
            host: '0.0.0.0',
            port: 8080,
            compress: true,
            inline: true,
            open: true,
            historyApiFallback: true,
            stats: {
                assets: true,
                chunks: false,
                chunkModules: false,
                chunkOrigins: false,
                modules: false,
                moduleTrace: false,
                reasons: false,
                source: false,
            },
        },
        devtool: 'cheap-source-map',
    }),
    prod: webpack_merge_1.default.smart(baseConfig, {
        mode: 'production',
        output: {
            publicPath: '/',
            filename: '[contenthash:6].[name].min.js',
        },
        module: {
            rules: [
                {
                    test: lessRegex,
                    exclude: lessModuleRegex,
                    use: getUse(false, true),
                },
                {
                    test: /\.css$/,
                    use: [
                        {
                            loader: mini_css_extract_plugin_1.default.loader,
                        },
                        {
                            loader: 'css-loader',
                        },
                    ],
                },
                {
                    test: lessModuleRegex,
                    use: getUse(true, true),
                },
            ],
        },
        plugins: [
            new webpack_1.default.DefinePlugin({
                'process.env': {
                    NODE_ENV: '"production"',
                },
            }),
            new mini_css_extract_plugin_1.default({
                filename: '[contenthash:6].[name].min.css',
            }),
        ],
        optimization: {
            minimizer: [new terser_webpack_plugin_1.default(), new optimize_css_assets_webpack_plugin_1.default()],
        },
    }),
};
const processor = (0, getConfigProcessor_1.default)('webpack');
const realProcessor = processor && processor.site;
if (realProcessor) {
    config.dev = realProcessor(config.dev, 'dev') || config.dev;
    config.prod = realProcessor(config.prod, 'prod') || config.prod;
}
exports.dev = config.dev;
exports.prod = config.prod;
