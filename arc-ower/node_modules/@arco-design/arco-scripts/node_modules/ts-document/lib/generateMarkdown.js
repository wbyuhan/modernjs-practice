"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var generate_1 = require("./generate");
var default_1 = require("./default");
var util_1 = require("./util");
function generateMarkdown(file, config) {
    var lang = (config === null || config === void 0 ? void 0 : config.lang) || default_1.defaultLang;
    var markdownSchema = default_1.defaultMarkdownSchema[lang];
    if (!markdownSchema) {
        return;
    }
    var schemas = generate_1.default(file, config);
    if (!schemas) {
        return;
    }
    var markdownOutput = {};
    for (var name in schemas) {
        markdownOutput[name] = getOutputMarkdown(name);
    }
    function getOutputMarkdown(name) {
        var hasVersion = !!(schemas === null || schemas === void 0 ? void 0 : schemas[name].data.find(function (schema) { var _a; return (_a = schema === null || schema === void 0 ? void 0 : schema.tags) === null || _a === void 0 ? void 0 : _a.find(function (t) { return t.name === 'version'; }); }));
        var markSchema = hasVersion ? markdownSchema : markdownSchema.filter(function (m) { return m.value !== 'tag.version'; });
        var markdownContent = schemas === null || schemas === void 0 ? void 0 : schemas[name].data.map(function (schema) {
            return getSingleLineMarkdown(schema, markSchema);
        }).join('\n');
        var markdownHeader = "|" + markSchema.map(function (md) { return md.title; }).join('|') + "|";
        markdownHeader += "\n|" + markSchema.map(function () { return '---'; }).join('|') + "|\n";
        var tags = schemas === null || schemas === void 0 ? void 0 : schemas[name].tags;
        var langTag = tags === null || tags === void 0 ? void 0 : tags.find(function (tag) { return tag.name === lang; });
        var mh = markdownHeader;
        if ((tags === null || tags === void 0 ? void 0 : tags.length) && langTag) {
            mh = langTag.value + "\n\n" + mh;
        }
        mh = "### " + name + "\n\n" + mh;
        return "" + mh + markdownContent;
    }
    function getSingleLineMarkdown(schema, markSchema) {
        var requiredTextWord = lang === 'zh' ? '必填' : 'Required';
        var requiredText = !schema.isOptional ? " **(" + requiredTextWord + ")**" : '';
        var singleLineMarkdown = markSchema.map(function (ms) {
            var field = ms.value;
            var execResult = /tag\.(\w+)/.exec(field);
            // tags
            if (execResult) {
                field = execResult[1];
                var obj = schema.tags.find(function (tag) { return tag.name === field; });
                var value_1 = obj ? util_1.toSingleLine(obj.value) : '-';
                return field === 'defaultValue' ? "`" + value_1 + "`" : value_1;
            }
            var value = schema[field];
            return field === 'type' ? "`" + value + "`" + requiredText : value;
        }).join('|');
        return "|" + singleLineMarkdown + "|";
    }
    return markdownOutput;
}
exports.default = generateMarkdown;
