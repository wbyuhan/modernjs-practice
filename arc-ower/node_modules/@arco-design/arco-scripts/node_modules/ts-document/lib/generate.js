"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_morph_1 = require("ts-morph");
var default_1 = require("./default");
var util_1 = require("./util");
var project = new ts_morph_1.Project({
    compilerOptions: {
        jsx: 'react',
    },
});
var propertyRegex = /(\w+)\s{0,}([?]?)\s{0,}:(.*?);?$/s;
// extract pure type
function extractFromPropertyText(text) {
    var regexResult = propertyRegex.exec(text);
    if (!regexResult) {
        return;
    }
    var name = regexResult[1];
    var isOptional = regexResult[2] === '?';
    var type = util_1.toSingleLine(regexResult[3]);
    return {
        name: name,
        isOptional: isOptional,
        type: type,
    };
}
function getSchemaFromSymbol(sym, defaultT) {
    var name = sym.getName();
    var typeText = sym.getDeclarations()[0].getText();
    var jsDocTags = sym.compilerSymbol.getJsDocTags();
    var extract = extractFromPropertyText(typeText);
    if (!extract) {
        return;
    }
    if (!jsDocTags.length || !jsDocTags.find(function (t) { return t.name === 'zh' || t.name === 'en'; })) {
        if (defaultT[name]) {
            return __assign({ name: name, isOptional: extract.isOptional }, defaultT[name]);
        }
        return;
    }
    var tags = jsDocTags.map(function (tag) { var _a; return ({ name: tag.name, value: (_a = tag.text) === null || _a === void 0 ? void 0 : _a[0].text }); });
    return {
        name: name,
        type: extract.type,
        isOptional: extract.isOptional,
        tags: tags,
    };
}
function generateSchema(sourceFile, typeChecker, config) {
    var interfaces = (sourceFile === null || sourceFile === void 0 ? void 0 : sourceFile.getInterfaces()) || [];
    var typeAliases = sourceFile.getTypeAliases() || [];
    var schemas = {};
    var defaultT = (config === null || config === void 0 ? void 0 : config.defaultTypeMap) || default_1.defaultTypeMap;
    interfaces.forEach(function (node) {
        fillSchemaFromNode(node);
    });
    typeAliases.forEach(function (node) {
        fillSchemaFromNode(node);
    });
    function fillSchemaFromNode(node) {
        var _a, _b;
        var tags = ((_a = node.getJsDocs()[0]) === null || _a === void 0 ? void 0 : _a.getTags()) || [];
        var name = (_b = tags.find(function (tag) { return tag.getTagName() === 'title'; })) === null || _b === void 0 ? void 0 : _b.getComment();
        var notExtends = !!tags.find(function (tag) { return tag.getTagName() === 'notExtends'; });
        var type = node.getType();
        var schema;
        // only interface support notExtends
        if (notExtends && node.getProperties) {
            schema = node.getProperties().map(function (a) { return getSchemaFromSymbol(a.getSymbol(), defaultT); }).filter(function (a) { return a; });
        }
        else {
            schema = typeChecker.getPropertiesOfType(type).map(function (a) { return getSchemaFromSymbol(a, defaultT); }).filter(function (a) { return a; });
        }
        if (!name) {
            return;
        }
        schemas[name] = {
            data: schema,
            tags: tags.map(function (tag) { return ({
                name: tag.getTagName(),
                value: tag.getCommentText(),
            }); }),
        };
    }
    return schemas;
}
function generate(file, config) {
    if (config === null || config === void 0 ? void 0 : config.sourceFilesPaths) {
        project.addSourceFilesAtPaths(config === null || config === void 0 ? void 0 : config.sourceFilesPaths);
    }
    var typeChecker = project.getTypeChecker();
    var sourceFile = project.getSourceFile(file);
    if (!sourceFile) {
        return;
    }
    return generateSchema(sourceFile, typeChecker, config);
}
exports.default = generate;
