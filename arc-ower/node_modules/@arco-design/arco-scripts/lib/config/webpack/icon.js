"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const webpack_1 = __importDefault(require("webpack"));
const progress_bar_webpack_plugin_1 = __importDefault(require("progress-bar-webpack-plugin"));
const arco_dev_utils_1 = require("@arco-design/arco-dev-utils");
const constant_1 = require("../../constant");
const getConfigProcessor_1 = __importDefault(require("../../scripts/utils/getConfigProcessor"));
const { name: packageName, version } = require(`${constant_1.CWD}/package.json`);
const packageNameWithoutScope = packageName.replace(/^@[^\/]+\//, '');
let config = {
    entry: `${constant_1.CWD}/${constant_1.DIR_NAME_ICON}/index.js`,
    output: {
        path: `${constant_1.CWD}/${constant_1.DIR_NAME_UMD}`,
        filename: 'arco-icon.min.js',
        library: 'arcoicon',
        libraryTarget: 'umd',
    },
    mode: 'production',
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                loader: 'babel-loader',
                exclude: /node_modules/,
            },
        ],
    },
    externals: [
        {
            react: {
                root: 'React',
                commonjs2: 'react',
                commonjs: 'react',
                amd: 'react',
            },
            'react-dom': {
                root: 'ReactDOM',
                commonjs2: 'react-dom',
                commonjs: 'react-dom',
                amd: 'react-dom',
            },
        },
        arco_dev_utils_1.webpackExternalForArco,
    ],
    resolve: {
        modules: ['node_modules'],
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
    },
    plugins: [
        new progress_bar_webpack_plugin_1.default({
            format: `[arco-scripts]: [:bar] ${chalk_1.default.green.bold(':percent')} (:elapsed seconds)`,
        }),
        new webpack_1.default.BannerPlugin({
            banner: `${packageNameWithoutScope} v${version}\n\nCopyright 2019-present, Bytedance, Inc.\nAll rights reserved.\n`,
        }),
    ],
};
const processor = (0, getConfigProcessor_1.default)('webpack');
const realProcessor = processor && processor.icon;
if (realProcessor) {
    config = realProcessor(config) || config;
}
exports.default = config;
