"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const webpack_1 = __importDefault(require("webpack"));
const progress_bar_webpack_plugin_1 = __importDefault(require("progress-bar-webpack-plugin"));
const arco_dev_utils_1 = require("@arco-design/arco-dev-utils");
const tsc_config_1 = __importDefault(require("../tsc.config"));
const babel_config_1 = __importDefault(require("../babel.config"));
const constant_1 = require("../../constant");
const getConfigProcessor_1 = __importDefault(require("../../scripts/utils/getConfigProcessor"));
const { name: packageName, version } = require(`${constant_1.CWD}/package.json`);
const packageNameWithoutScope = packageName.replace(/^@[^\/]+\//, '');
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;
function getUse(cssModule) {
    const options = cssModule
        ? {
            modules: {
                localIdentName: '[local]-[hash:10]',
            },
        }
        : {};
    return [
        {
            loader: 'style-loader',
        },
        {
            loader: 'css-loader',
            options,
        },
        {
            loader: 'less-loader',
            options: {
                javascriptEnabled: true,
            },
        },
    ];
}
function getTSLoaderOptions() {
    const options = {
        // Just for simplicity, not all the values in tscConfig are compilerOptions
        compilerOptions: Object.assign({}, tsc_config_1.default),
    };
    if (tsc_config_1.default.project) {
        options.configFile = tsc_config_1.default.project;
    }
    return options;
}
let config = {
    mode: 'production',
    entry: {
        arco: `${constant_1.CWD}/${constant_1.DIR_NAME_COMPONENT_LIBRARY}/index.tsx`,
    },
    output: {
        path: `${constant_1.CWD}/${constant_1.DIR_NAME_UMD}`,
        filename: '[name].min.js',
        library: '[name]',
        libraryTarget: 'umd',
    },
    module: {
        rules: [
            {
                test: /\.tsx?$/,
                exclude: /node_modules/,
                use: [
                    {
                        loader: 'babel-loader',
                        options: babel_config_1.default,
                    },
                    {
                        loader: 'ts-loader',
                        options: getTSLoaderOptions(),
                    },
                ],
            },
            {
                test: lessRegex,
                exclude: lessModuleRegex,
                use: getUse(false),
            },
            {
                test: /\.css$/,
                use: [
                    {
                        loader: 'style-loader',
                    },
                    {
                        loader: 'css-loader',
                    },
                ],
            },
            {
                test: /\.(png|jpg|gif|ttf|eot|woff|woff2)$/,
                loader: 'file-loader',
                options: {
                    esModule: false,
                },
            },
            {
                test: /\.svg$/,
                use: ['@svgr/webpack'],
            },
            {
                test: lessModuleRegex,
                use: getUse(true),
            },
        ],
    },
    externals: [
        {
            react: {
                root: 'React',
                commonjs2: 'react',
                commonjs: 'react',
                amd: 'react',
            },
            'react-dom': {
                root: 'ReactDOM',
                commonjs2: 'react-dom',
                commonjs: 'react-dom',
                amd: 'react-dom',
            },
        },
        arco_dev_utils_1.webpackExternalForArco,
    ],
    resolve: {
        modules: ['node_modules'],
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
    },
    resolveLoader: {
        modules: ['node_modules', 'node_modules/@arco-design/arco-scripts/node_modules'],
    },
    plugins: [
        new progress_bar_webpack_plugin_1.default({
            format: `[arco-scripts]: [:bar] ${chalk_1.default.green.bold(':percent')} (:elapsed seconds)`,
        }),
        new webpack_1.default.BannerPlugin({
            banner: `${packageNameWithoutScope} v${version}\n\nCopyright 2019-present, Bytedance, Inc.\nAll rights reserved.\n`,
        }),
    ],
};
const processor = (0, getConfigProcessor_1.default)('webpack');
// When webpack.config.js directly exposes a function, it defaults to the configuration of component webpack
const realProcessor = typeof processor === 'function'
    ? processor
    : processor && processor.component
        ? processor.component
        : null;
if (realProcessor) {
    config = realProcessor(config) || config;
}
// Compatible, avoid the outer layer directly set the entry as a string
if (typeof config.entry === 'string') {
    config.entry = {
        arco: config.entry,
    };
}
// 通过 Node Env 传递而来的参数具有最高优先级
if (constant_1.BUILD_ENV_MODE) {
    config.mode = constant_1.BUILD_ENV_MODE;
}
if (constant_1.BUILD_ENV_DIST_FILENAME_JS) {
    config.output.filename = constant_1.BUILD_ENV_DIST_FILENAME_JS;
}
exports.default = config;
